define(function(require) {		require("./js/nameOf/methods");		var override = require("js/Method").override;	var util, urns = require("./urns");		function gatherKeys(obj, keys, objs, id) {		if((objs = objs || []).indexOf(obj) !== -1) return;		objs.push(obj);				if((id = obj['@_gml:id'])) {			keys[id] = obj;		}		for(var k in obj) {			if(typeof obj[k] === "object") gatherKeys(obj[k], keys);		}				objs.pop();	}		return (util = {		require_urns: function(locale) {			return new Promise(function(resolve, reject) {				require([					"./13.5/immetingen/lookup/" + locale, 					"./13.5/imsikb0101/lookup/" + locale				], function(immetingen, imsikb) {					resolve({immetingen: immetingen, imsikb0101: imsikb});				}, reject);			});		},		lookup: require("./lookup"),		parse: function(root, opts) {			var elements = {}, keys = {}, unresolved = [], entities = {}, info;			var all;					if(js.get("bodeminformatie.locatie", root)) {				var locatie = root.bodeminformatie.locatie;				var push = (type, obj) => {					elements[type] = elements[type] || {};					entities[type] = entities[type] || [];					entities[type].push(obj);					all.push(obj);				};								all = [];				push("Locatie", locatie);				locatie['@_va:bodeminformatie'] = root.bodeminformatie;				Array.as(locatie.onderzoek||[]).forEach(onderzoek => {					push("Onderzoek", onderzoek);					onderzoek['@_va:locatie'] = locatie;					var veldmonsters = {};					Array.as(onderzoek.meetpunt||[]).forEach(meetpunt => {						push("Meetpunt", meetpunt);						meetpunt['@_va:onderzoek'] = onderzoek;						Array.as(meetpunt.bodemlaag||[]).forEach(bodemlaag => {							push("Bodemlaag", bodemlaag);							bodemlaag['@_va:meetpunt'] = meetpunt;						});						Array.as(meetpunt.bodemmonster||[]).forEach(bodemmonster => {							push("Bodemmonster", bodemmonster);							bodemmonster['@_va:meetpunt'] = meetpunt;							Array.as(bodemmonster.veldmonster||[]).forEach(veldmonster => {								veldmonster['@_va:bodemmonster'] = bodemmonster;								bodemmonster['@_va:veldmonster']  = (veldmonsters[veldmonster.id] = {									'@_va:bodemmonster': bodemmonster								});							});						});						Array.as(meetpunt.filter||[]).forEach(filter => {							push("Filter", filter);							filter['@_va:meetpunt'] = meetpunt;							filter['@_va:veldmonsters'] = [];							Array.as(filter.veldmonster||[]).forEach(veldmonster => {								veldmonster['@_va:filter'] = filter;								var link = veldmonsters[veldmonster.id] = {									'@_va:filter': filter								};								if(!filter['@_va:veldmonsters'].filter(_ => _['@_va:filter'] === filter).length) {									filter['@_va:veldmonsters'].push(link);								}							});						});						Array.as(meetpunt.afwerking||[]).forEach(afwerking => {							push("Afwerking", afwerking);							afwerking['@_va:meetpunt'] = meetpunt;						});						Array.as(meetpunt.casing||[]).forEach(casing => {							push("Casing", casing);							casing['@_va:meetpunt'] = meetpunt;						});					});					Array.as(onderzoek.analysemonster||[]).forEach(analysemonster => {						push("Analysemonster", analysemonster);						analysemonster['@_va:onderzoek'] = onderzoek;						analysemonster['@_va:deelmonsters'] = Array							.as(analysemonster.deelmonster||[])							.map(dm => {								var deelmonster = veldmonsters[dm.veldmonsterid];								if(deelmonster !== undefined) {									deelmonster['@_va:analysemonsters'] = deelmonster['@_va:analysemonsters'] || [];									deelmonster['@_va:analysemonsters'].push(analysemonster);								} else {									console.warn(analysemonster, "undefined veldmonster");								}								return deelmonster;							});																		Array.as(analysemonster.analyseresultaat||[]).forEach(analyseresultaat => {							push("Analyseresultaat", analyseresultaat);							analyseresultaat['@_va:analysemonster'] = analysemonster;							analyseresultaat['@_componentid-urn'] = js.sf("urn:immetingen:Parameter:id:%d", analyseresultaat['@_componentid']);							analyseresultaat['@_eenheid-urn'] = js.sf("urn:immetingen:Eenheid:id:%d", analyseresultaat['@_eenheid']);						});					});				});				// keys[id] = elements[element][id] = _;//object;							} else {				var doc = root['imsikb0101:FeatureCollectionIMSIKB0101'];				all = doc['imsikb0101:featureMember'];								gatherKeys(doc, keys);								// TODO move this to veldapps-xml/resolveXlinkHref				function resolve(obj, path, all) {					if(!path.push) { path = []; all = []; }					if(obj && obj['@_gml:id']) all.push(obj);					for(var k in obj) {						if(!k.endsWith("-resolved")) {							var v = obj[k]; path.push(k);							// if(typeof v === "string" && v.indexOf("urn:") === 0) {							// 	var p = v.toLowerCase().split(":"), key = p[2];							// 	if(urns.hasOwnProperty(p[1]) && urns[p[1]].hasOwnProperty(key)) {							// 		if((obj[k + "-resolved"] = js.get([p[1], key, p[4]], urns)) === undefined) {							// 			if(unresolved.indexOf(v) === -1) {							// 				unresolved.push(v);							// 			}							// 		} else {							// 			// obj[k] = obj[k + "-resolved"];							// 		}							// 		// delete obj[k + "-resolved"];							// 	} else if(unresolved.indexOf(v) === -1) {							// 		unresolved.push(v);							// 	}							// }							if(k === "@_xlink:href") {								if(!obj.hasOwnProperty("@_xlink:href-resolved")) {									if(typeof v === "string" && v.charAt(0) === '#') {										if(undefined === (obj['@_xlink:href-resolved'] = keys[v.substring(1)])) {											info = {path: path.join("/"), all: [].concat(all)};											info[k] = v;											unresolved.push(info);										}									} else if(unresolved.indexOf(v) === -1) {										unresolved.push(v);									}								}							} else if(v !== null && typeof v === "object") {								resolve(v, path, all);							}							path.pop();						}					}					if(obj && obj['@_gml:id']) all.pop();				}								all.map(function(_) {					var element = Object.keys(_)[0];					var object = _[element];					var id = object['@_gml:id'];										elements[element] = elements[element] || (elements[element]= {});					entities[element] = entities[element] || (entities[element]= []);					entities[element].push(object);										// gatherKeys(_, keys);										keys[id] = elements[element][id] = _;//object;					// object['@_v7:xsd-element'] = element;				});				all.forEach(resolve);			/* link immetingen:Analysis back to imsikb0101:Sample */				(entities['imsikb0101:Sample']||[]).forEach(sample => {					Array.as(sample['sam:relatedObservation']||[]).forEach(ro => {						var analysis = js.get("@_xlink:href-resolved.immetingen:Analysis", ro);						if(analysis && !analysis['om:featureOfInterest']) {							analysis['om:featureOfInterest'] = {								'@_xlink:href': js.sf("#%s", sample['@_gml:id']),								'@_xlink:href-resolved': sample							};						}					});				});		/* link immetingen:Characteristic back to imsikb0101:Layer */				(entities['imsikb0101:Layer']||[]).forEach(layer => {					Array.as(layer['sam:relatedObservation']||[]).forEach(ro => {						var characteristic = js.get("@_xlink:href-resolved.immetingen:Characteristic", ro);						if(characteristic && !characteristic['om:featureOfInterest']) {							characteristic['om:featureOfInterest'] = {								'@_xlink:href': js.sf("#%s", layer['@_gml:id']),								'@_xlink:href-resolved': layer							};						}					});				});			}						return {				elements: elements, 				entities: entities,				keys: keys, 				features: all, 				unresolved: unresolved			};		},		traverse: require("./traverse"),		urns: urns,		guess: require("./guess"),		tables: {			immetingen: require("json!./immetingen-all"),			imsikb0101: require("json!./imsikb0101-all")		}	});});